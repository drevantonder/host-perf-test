name: Multi-Region Benchmark (Fly.io)

on:
  push:
    paths:
      - 'apps/benchmark/**'
      - '.github/workflows/benchmark.yml'

permissions:
  contents: read
  packages: write

env:
  REGIONS: '["iad","lhr","syd"]'
  APP_NAME: host-perf-test

jobs:
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Build image (root context)
        id: build
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          FLY_IMAGE=registry.fly.io/$APP_NAME:${{ github.sha }}
          echo "Authenticating Docker with Fly registry"
          flyctl auth docker
          echo "Building $FLY_IMAGE"
          docker build -f apps/benchmark/Dockerfile -t "$FLY_IMAGE" .
          echo "Pushing $FLY_IMAGE"
          docker push "$FLY_IMAGE"
          echo "image=$FLY_IMAGE" >> $GITHUB_OUTPUT

  run-benchmark:
    needs: build-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [iad, lhr, syd]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Ensure app exists
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl apps show $APP_NAME || flyctl apps create $APP_NAME
      - name: Run benchmark in ${{ matrix.region }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          IMAGE="${{ needs.build-image.outputs.image }}"
          TMP_OUT=$(mktemp)
          echo "Starting machine from $IMAGE in ${{ matrix.region }}"
          flyctl machines run "$IMAGE" \
            --app $APP_NAME \
            --region ${{ matrix.region }} \
            --restart no \
            --env EXTRA_ARGS="--runs 10 --label ${{ matrix.region }} --json --out /tmp/result.json" | tee "$TMP_OUT"

          INSTANCE_ID=$(awk -F': ' '/Instance ID:/ {id=$2} END{print id}' "$TMP_OUT")
          if [ -z "$INSTANCE_ID" ]; then
            echo "Could not parse Instance ID from machines run output:"
            cat "$TMP_OUT"
          fi

          # Poll SFTP for result file
          GOT=""
          for i in {1..60}; do
            if flyctl sftp get --app $APP_NAME --machine "$INSTANCE_ID" /tmp/result.json "result-${{ matrix.region }}.json"; then
              echo "Downloaded result for ${{ matrix.region }}"
              GOT=1
              break
            fi
            echo "Waiting for result.json on machine $INSTANCE_ID... ($i)"
            sleep 5
          done

          if [ -z "$GOT" ] || [ ! -s "result-${{ matrix.region }}.json" ]; then
            echo "Failed to retrieve result JSON from machine $INSTANCE_ID"
            exit 1
          fi

          # Clean up the machine
          flyctl machines destroy --app $APP_NAME "$INSTANCE_ID" -y || true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-${{ matrix.region }}
          path: result-${{ matrix.region }}.json

  aggregate:
    needs: run-benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Merge and summarize
        run: |
          node -e '
            const fs = require("fs");
            const path = require("path");
            const dir = "artifacts";
            const files = fs.readdirSync(dir, { withFileTypes: true })
              .flatMap(d => d.isDirectory() ? fs.readdirSync(path.join(dir, d.name)).map(f => path.join(dir, d.name, f)) : [path.join(dir, d.name)] )
              .filter(f => f.endsWith(".json"));
            const items = files.map(f => JSON.parse(fs.readFileSync(f, "utf8")));
            const combined = { items };
            fs.writeFileSync("combined.json", JSON.stringify(combined, null, 2));

            // Build markdown summary of TTLB p50 by host per label
            const lines = [];
            lines.push("## Benchmark Summary\n");
            for (const it of items) {
              const label = it.meta?.label || "unknown";
              lines.push(`### Region: ${label}`);
              lines.push("\n| Host | TTLB p50 (ms) |\n|---|---|\n");
              const byHost = it.overallByHost || [];
              const best = byHost.reduce((a,b)=>a && a.ttlbP50<=b.ttlbP50?a:b, null);
              for (const h of byHost) {
                const tag = best && h.host===best.host ? " ← best" : "";
                lines.push(`| ${h.host} | ${h.ttlbP50.toFixed(2)}${tag} |`);
              }
              lines.push("\n");
            }
            fs.writeFileSync("SUMMARY.md", lines.join("\n"));
          '
      - name: Upload combined.json
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-combined
          path: combined.json
      - name: Job Summary
        run: cat SUMMARY.md >> $GITHUB_STEP_SUMMARY
